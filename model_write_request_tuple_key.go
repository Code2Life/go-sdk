/**
 * Go SDK for OpenFGA
 *
 * API version: 0.1
 * Website: https://openfga.dev
 * Documentation: https://openfga.dev/docs
 * Support: https://discord.gg/8naAwJfWN6
 * License: [Apache-2.0](https://github.com/openfga/go-sdk/blob/main/LICENSE)
 *
 * NOTE: This file was auto generated by OpenAPI Generator (https://openapi-generator.tech). DO NOT EDIT.
 */

package openfga

import (
	"encoding/json"
)

// WriteRequestTupleKey struct for WriteRequestTupleKey
type WriteRequestTupleKey struct {
	User      string                 `json:"user"yaml:"user"`
	Relation  string                 `json:"relation"yaml:"relation"`
	Object    string                 `json:"object"yaml:"object"`
	Condition *RelationshipCondition `json:"condition,omitempty"yaml:"condition,omitempty"`
}

// NewWriteRequestTupleKey instantiates a new WriteRequestTupleKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWriteRequestTupleKey(user string, relation string, object string) *WriteRequestTupleKey {
	this := WriteRequestTupleKey{}
	this.User = user
	this.Relation = relation
	this.Object = object
	return &this
}

// NewWriteRequestTupleKeyWithDefaults instantiates a new WriteRequestTupleKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWriteRequestTupleKeyWithDefaults() *WriteRequestTupleKey {
	this := WriteRequestTupleKey{}
	return &this
}

// GetUser returns the User field value
func (o *WriteRequestTupleKey) GetUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *WriteRequestTupleKey) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *WriteRequestTupleKey) SetUser(v string) {
	o.User = v
}

// GetRelation returns the Relation field value
func (o *WriteRequestTupleKey) GetRelation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Relation
}

// GetRelationOk returns a tuple with the Relation field value
// and a boolean to check if the value has been set.
func (o *WriteRequestTupleKey) GetRelationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Relation, true
}

// SetRelation sets field value
func (o *WriteRequestTupleKey) SetRelation(v string) {
	o.Relation = v
}

// GetObject returns the Object field value
func (o *WriteRequestTupleKey) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *WriteRequestTupleKey) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *WriteRequestTupleKey) SetObject(v string) {
	o.Object = v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *WriteRequestTupleKey) GetCondition() RelationshipCondition {
	if o == nil || o.Condition == nil {
		var ret RelationshipCondition
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WriteRequestTupleKey) GetConditionOk() (*RelationshipCondition, bool) {
	if o == nil || o.Condition == nil {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *WriteRequestTupleKey) HasCondition() bool {
	if o != nil && o.Condition != nil {
		return true
	}

	return false
}

// SetCondition gets a reference to the given RelationshipCondition and assigns it to the Condition field.
func (o *WriteRequestTupleKey) SetCondition(v RelationshipCondition) {
	o.Condition = &v
}

func (o WriteRequestTupleKey) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["user"] = o.User
	toSerialize["relation"] = o.Relation
	toSerialize["object"] = o.Object
	if o.Condition != nil {
		toSerialize["condition"] = o.Condition
	}
	return json.Marshal(toSerialize)
}

type NullableWriteRequestTupleKey struct {
	value *WriteRequestTupleKey
	isSet bool
}

func (v NullableWriteRequestTupleKey) Get() *WriteRequestTupleKey {
	return v.value
}

func (v *NullableWriteRequestTupleKey) Set(val *WriteRequestTupleKey) {
	v.value = val
	v.isSet = true
}

func (v NullableWriteRequestTupleKey) IsSet() bool {
	return v.isSet
}

func (v *NullableWriteRequestTupleKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWriteRequestTupleKey(val *WriteRequestTupleKey) *NullableWriteRequestTupleKey {
	return &NullableWriteRequestTupleKey{value: val, isSet: true}
}

func (v NullableWriteRequestTupleKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWriteRequestTupleKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
